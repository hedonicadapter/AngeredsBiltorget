---
import Dropdown from '../components/Dropdown.tsx';
import CarsContainer from '../components/CarsContainer.jsx';
import SearchBar from '../components/SearchBar.tsx';
import CurrentResultCount from '../components/CurrentResultCount.jsx';
import "../components/styles/showroom.css";
import Layout from "../layouts/Layout.astro";
import type Car from '../Models/Car';
import {
  generateDummyCarData,
  getProductCount,
  getProductFiles,
  getProducts,
  upsertProduct,
} from '../api';
import { DocumentSnapshot } from 'firebase/firestore';

  const count = await getProductCount();
---
<Layout>
<section class="container flex flex-col items-center w-screen mx-auto">
  <search class="gap-[calc(var--golden-ratio)*0.25em] sticky top-[var(--navbar-height)] w-full flex flex-col">
      <div class="buttons-container flex flex-row flex-wrap items-center justify-start md:justify-between">
        <Dropdown
          client:load
          title="Årsmodell"
          options={["2019", "2020", "2021", "2022"]}
        ></Dropdown>
        <Dropdown
          client:load
          title="Märke"
          options={["Volvo", "Saab", "Mercedes", "Audi"]}
        ></Dropdown>
  
        <SearchBar client:load/>
      </div>
      <hr />
      <div
        class="tags-and-result-count-container flex flex-row justify-between items-start"
      >
        <div class="tags-container flex flex-row"></div>
        <div class="results-count">
          <CurrentResultCount client:load/> /
          <span id="results-available">{count}</span> Resultat
        </div>
      </div>
    </search>
    <CarsContainer client:load/>
  </section>
</Layout>

  <script>
    import {
      generateDummyCarData,
      getProductCount,
      getProductFiles,
      getProducts,
      upsertProduct,
    } from '../api';
    import type Car from '../Models/Car';
    import { DocumentSnapshot } from 'firebase/firestore';

    let oldScrollY = 0;

    const filterContainer = document.querySelector(
      '.filter-container'
    ) as HTMLElement;
    const filterContainerRect = filterContainer?.getBoundingClientRect();
    filterContainer?.style.setProperty(
      '--original-position',
      `${filterContainerRect.top}px`
    );

    const carsContainer = document.querySelector('.cars-container') as HTMLElement;

    const setFilterContainerPosition = () => {
      const section = document.querySelector('section.container') as HTMLElement;
      const navbar = document.querySelector('.navbar-top') as HTMLElement;

      section?.style.setProperty('--navbar-height', `${navbar.offsetHeight}px`);
    };

    const redirectScrollY = (scrollIncrement = 100) => {
      const scrolledToBottom =
        window.scrollY + window.innerHeight === document.body.scrollHeight;
      const direction = window.scrollY > oldScrollY ? 'down' : 'up';

      if (scrolledToBottom) {
        if (direction === 'down')
          carsContainer.scrollBy({
            behavior: 'smooth',
            top: -scrollIncrement * 10,
          });
      }

      if (direction === 'up')
        carsContainer.scrollBy({ behavior: 'smooth', top: scrollIncrement * 10 });
    };

    const handleWindowScrollAttempt = (event: WheelEvent | KeyboardEvent) => {
      redirectScrollY(event.deltaY);
    };




  
    



  window.addEventListener('scroll', setFilterContainerPosition);
  window.addEventListener('wheel', handleWindowScrollAttempt);
  window.addEventListener('keydown', (event: KeyboardEvent) => {
    if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {
      handleWindowScrollAttempt(event);
    }
  });

  setFilterContainerPosition();

  </script>