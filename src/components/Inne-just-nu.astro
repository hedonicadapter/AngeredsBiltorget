---
import Card from './Card';
import FrontPageCars from './FrontPageCars';

---

<section>
  <div class="relative h-[300vh] w-screen text-center">
    <div class="bg-bg absolute w-full h-full -z-[1]"></div>
    <div class="sticky top-0 h-screen pt-[calc(var(--golden-ratio)*6em)]">
      <div class="flex flex-col h-full justify-evenly">
        <h3>Inne just nu</h3>
        <div class="cards-container flex-1 overflow-y-visible">
          <Card overrideClass="invisible" title='Yoyota' price='1.99' client:idle />
          <Card overrideClass="invisible" title='Yoyota' price='1.99' client:idle />
          <Card overrideClass="invisible" title='Din bil?' price='Ditt pris' client:idle />
            <!-- <FrontPageCars client:idle/> -->
        </div>
        <div class="flex justify-center my-auto pb-32 pt-14 z-40">
          <a href="/showroom" class="z-40 flex flex-row pointer-events-auto items-center gap-4 outline outline-on-bg-light text-on-bg-light hover:outline-on-bg hover:text-on-bg p-4 outline-1 pl-8">Visa alla <div class="material-symbols-sharp">
            chevron_right
            </div></a>
        </div>
        
      </div>
    </div>
  </div>
</section>
  

<script>
    import { clearTimeouts } from '../util/helpers';
    import { whileInView } from '../util/intersection-observer';

    let timeouts: NodeJS.Timeout[] = [];

    const setCardsVisible = () => {
    const cards = document.querySelectorAll('.card-container');
    if (!cards) return;

    clearTimeouts(timeouts);

    cards.forEach((card, index) => {
        const timeout = setTimeout(() => {
          card.classList.add('visible');
          card.classList.remove('invisible');
        }, (index + 0.5) * 650);

        timeouts.push(timeout);
    });
    };

    const setCardsInVisible = () => {
    const cards = document.querySelectorAll('.card-container');
    if (!cards) return;

    clearTimeouts(timeouts);

    for (let i = cards.length; i >= 0; i--) {
        const timeout = setTimeout(() => {
          cards[i].classList.remove('visible');
          cards[i].classList.add('invisible');
        }, i * 100);

        timeouts.push(timeout);
    }
    };

    whileInView(
    document.querySelector('.sticky-just-nu') as HTMLElement,
    setCardsVisible,
    setCardsInVisible
    );

    const container = document.querySelector('.inne-just-nu');
    const cardsContainer = document.querySelector('.cards-container');

    window.addEventListener('scroll', () => {
    const rect = container!.getBoundingClientRect();
    const scrollTop = window.scrollY || document.documentElement.scrollTop;
    const elementTop = rect.top + scrollTop;

    const scrollPos = Math.max(scrollTop - elementTop, 0);
    const maxScroll = rect.height - window.innerHeight;

    let scrollPercentage = (scrollPos / maxScroll) * 100;

    scrollPercentage = Math.max(0, Math.min(100, scrollPercentage));

    (cardsContainer as HTMLElement).scrollLeft =
        scrollPercentage * 0.01 * cardsContainer!.scrollWidth;
    });

</script>